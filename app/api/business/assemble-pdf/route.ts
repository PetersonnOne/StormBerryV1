import { NextRequest, NextResponse } from 'next/server'
import { auth } from '@clerk/nextjs/server'
import { aiService } from '@/lib/ai/unified-ai-service'
import { foxitService } from '@/lib/pdf/foxit-service'
import { usageStatsService } from '@/lib/db/usage-stats'
import { z } from 'zod'

const pdfAssemblyRequestSchema = z.object({
  title: z.string().min(1).max(200),
  subtitle: z.string().optional(),
  author: z.string().optional(),
  sections: z.array(z.object({
    title: z.string(),
    prompt: z.string(),
  })).min(1).max(10),
  includeAppendix: z.boolean().default(false),
  appendixData: z.array(z.object({
    title: z.string(),
    content: z.string(),
  })).optional(),
  documentType: z.enum(['business-plan', 'research-report', 'proposal', 'presentation', 'custom']).default('custom'),
  model: z.string().default('gemini-2.5-pro'),
})

export async function POST(request: NextRequest) {
  try {
    const { userId } = auth()
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Check rate limits
    const rateLimit = await usageStatsService.checkRateLimit(userId)
    if (!rateLimit.allowed) {
      return NextResponse.json({ 
        error: 'Rate limit exceeded',
        remainingTokens: rateLimit.remainingTokens 
      }, { status: 429 })
    }

    const body = await request.json()
    
    if (!body || Object.keys(body).length === 0) {
      return NextResponse.json({ error: 'Request body is required' }, { status: 400 })
    }
    
    const { title, subtitle, author, sections, includeAppendix, appendixData, documentType, model } = pdfAssemblyRequestSchema.parse(body)

    const startTime = Date.now()
    let totalTokensUsed = 0
    let totalCost = 0

    // Generate AI content for each section
    const generatedSections = []
    
    for (const section of sections) {
      const systemPrompt = `You are a professional ${documentType} writer and content creator.
Generate high-quality content for the "${section.title}" section of a ${documentType}.

Guidelines:
- Write in a professional, clear, and engaging style
- Ensure content is relevant to the section title and overall document theme
- Use appropriate formatting with headings, bullet points, and numbered lists
- Include specific details, examples, and actionable insights where relevant
- Aim for 300-600 words per section
- Maintain consistency with the document's professional tone

Document Context:
- Title: ${title}
- Document Type: ${documentType}
- Section: ${section.title}`

      const response = await aiService.generateContent(
        section.prompt,
        model as any,
        systemPrompt,
        1000
      )

      if (!response.content) {
        throw new Error(`Failed to generate content for section: ${section.title}`)
      }

      generatedSections.push({
        title: section.title,
        content: response.content
      })

      totalTokensUsed += response.tokensUsed
      totalCost += response.cost
    }

    // Prepare PDF assembly content
    const pdfContent = {
      coverPage: {
        title,
        subtitle,
        author: author || 'Generated by Storm Berry AI'
      },
      sections: generatedSections,
      appendix: includeAppendix && appendixData ? appendixData : undefined
    }

    // Assemble the PDF
    const pdfBuffer = await foxitService.assemblePDF(pdfContent)

    const duration_ms = Date.now() - startTime

    // Record usage
    await usageStatsService.recordUsage(userId, {
      tokensUsed: totalTokensUsed,
      cost: totalCost,
      model: model,
      operation: 'pdf-assembly',
      duration_ms,
      metadata: {
        title,
        documentType,
        sectionsGenerated: sections.length,
        includeAppendix,
        pdfSize: pdfBuffer.length
      }
    })

    // Return assembled PDF
    const filename = `${title.replace(/[^a-zA-Z0-9]/g, '_')}_assembled.pdf`
    
    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': pdfBuffer.length.toString(),
      },
    })

  } catch (error) {
    console.error('Error assembling PDF:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({ 
        error: 'Invalid request data',
        details: error.errors 
      }, { status: 400 })
    }

    return NextResponse.json({ 
      error: 'Failed to assemble PDF',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

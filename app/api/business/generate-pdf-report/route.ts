import { NextRequest, NextResponse } from 'next/server'
import { auth } from '@clerk/nextjs/server'
import { aiService } from '@/lib/ai/unified-ai-service'
import { foxitService } from '@/lib/pdf/foxit-service'
import { usageStatsService } from '@/lib/db/usage-stats'
import { z } from 'zod'

const pdfReportRequestSchema = z.object({
  topic: z.string().min(1).max(200),
  reportType: z.enum(['business-analysis', 'market-research', 'financial-report', 'project-summary', 'custom']).default('business-analysis'),
  includeCharts: z.boolean().default(false),
  includeCoverPage: z.boolean().default(true),
  includeTableOfContents: z.boolean().default(true),
  author: z.string().optional(),
  watermark: z.string().optional(),
  model: z.string().default('gemini-2.5-pro'),
})

export async function POST(request: NextRequest) {
  try {
    const { userId } = auth()
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Check rate limits
    const rateLimit = await usageStatsService.checkRateLimit(userId)
    if (!rateLimit.allowed) {
      return NextResponse.json({ 
        error: 'Rate limit exceeded',
        remainingTokens: rateLimit.remainingTokens 
      }, { status: 429 })
    }

    const body = await request.json()
    
    // Add validation to prevent empty request errors
    if (!body || Object.keys(body).length === 0) {
      return NextResponse.json({ error: 'Request body is required' }, { status: 400 })
    }
    
    const { topic, reportType, includeCharts, includeCoverPage, includeTableOfContents, author, watermark, model } = pdfReportRequestSchema.parse(body)

    // Generate AI content for the report
    const systemPrompt = `You are a professional business report writer and analyst.
Create a comprehensive ${reportType} report on "${topic}".

Structure your response with clear sections:
1. Executive Summary
2. Introduction
3. Key Findings and Analysis
4. Recommendations
5. Conclusion

Guidelines:
- Use professional business language
- Include specific insights and actionable recommendations
- Make it detailed and informative (aim for 800-1200 words)
- Use bullet points and numbered lists where appropriate
- Include data points and metrics when relevant
- Ensure the content is well-organized and flows logically

Format the response as structured text with clear section headers.`

    const prompt = `Generate a detailed ${reportType} report on "${topic}". Include comprehensive analysis, key findings, and actionable recommendations.`

    const startTime = Date.now()
    const response = await aiService.generateContent(
      prompt,
      model as any,
      systemPrompt,
      2000
    )

    const duration_ms = Date.now() - startTime

    if (!response.content) {
      return NextResponse.json({ error: 'Failed to generate report content' }, { status: 500 })
    }

    // Generate PDF using Foxit service
    const pdfOptions = {
      title: `${reportType.replace('-', ' ').toUpperCase()}: ${topic}`,
      content: response.content,
      author: author || 'Storm Berry AI',
      subject: `${reportType} report generated by AI`,
      includeCoverPage,
      includeTableOfContents,
      watermark
    }

    const pdfBuffer = await foxitService.generatePDFReport(pdfOptions)

    // Record usage
    await usageStatsService.recordUsage(userId, {
      tokensUsed: response.tokensUsed,
      cost: response.cost,
      model: response.model,
      operation: 'pdf-report-generation',
      duration_ms,
      metadata: {
        topic,
        reportType,
        pdfSize: pdfBuffer.length
      }
    })

    // Return PDF as downloadable file
    const filename = `${topic.replace(/[^a-zA-Z0-9]/g, '_')}_report.pdf`
    
    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': pdfBuffer.length.toString(),
      },
    })

  } catch (error) {
    console.error('Error generating PDF report:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({ 
        error: 'Invalid request data',
        details: error.errors 
      }, { status: 400 })
    }

    return NextResponse.json({ 
      error: 'Failed to generate PDF report',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
